#! /usr/bin/python3
"""
Generate C code wrapping around generated assembly code.
"""
import argparse

TEMPLATE = """
int __attribute__((aligned (64))) __attribute__((noinline)) foo_0x%01x(int i) {
  int iterations;
  // 30 * 1000 * 200 ==> 16 seconds
  for (iterations = 0; iterations < 30*1000*200; iterations++) {
    asm(".rept 14\\nnop\\n.endr\\n");  // magic padding to make eor blocks align
    asm(".include \\"arm_insn_lines_0x%01x.s\\"");
  }
  return i;
}

"""

def gen_floods():
    """Generate a bunch of C functions towrap around the cache flooders."""
    parser = argparse.ArgumentParser("write C code functions to flood")
    parser.add_argument(
        "--number",
        help="number of flooders",
        type=int,
        default=16,)
    args = parser.parse_args()
    print("// AUTOMATICALLY GENERATED by gen_arm64_flood.py")
    for i in range(0, args.number):
        print(TEMPLATE % (i, i,))

if __name__ == "__main__":
    gen_floods()
